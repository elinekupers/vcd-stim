function [gabors, masks, info] = vcd_gabor(params)% VCD function to create gabor images for experimental display.%  [gabors, masks, info] = vcd_gabor(params)%% Purpose:%   Make gabors images and corresponding alpha transparency masks that crop%   the top and bottom corners when presenting images.%%   We have 24 core gabor images sorted as follows:%   * im 1:8   8 orientations for contrast level 1%   * im 9:16  8 orientations for contrast level 2%   * im 17:24 8 orientations for contrast level 3%%   4 quadrature phases (0,90,180,270 deg) will be evenly distributed%   across these 24 core images. 2 spatial locations (left/right) will be%   evenly distributed across 24 core images: uneven image nrs are left,%   even image nrs are right.%%   We also create 4 test images for WM task: -15, -5 +5 +15 deg%   orientation tilt offsets from core image orientation, with unique image%   nrs 111-206. These WM test images inherit the spatial location,%   contrast level and phase from their reference gabor.%%   When params.stim.store_imgs = true, this function will store generated%   object images as a single mat file in params.stim.obj.stimfile (e.g.:%   fullfile(vcd_rootPath,'workspaces','stimuli',<disp_name>, ...%   'gabor_<disp_name>_<date>.mat').%% INPUTS:%   params                  : stim params struct (see vcd_setStimParams.m)%    *** this function requires the following struct fields ***%    bckgrnd_grayval        : (int) background gray value (128)%    gabor.img_sz_pix       : (int) size of image support in pixels, needs%                               to be even integer number!%    gabor.gauss_std_pix    : (double) std of gaussian window%    gabor.cycles_per_pix   : (double) spatial frequency (cycles per pixel)%    gabor.contrast         : (double) gabor contrasts (fraction) (Michelson)%    gabor.ori_deg          : (double) gabor orientation (deg), 0 deg = 12 o'clock%    gabor.ph_deg           : (double) gabor phase (deg)%    gabor.delta_from_ref   : (double) offset gabor orientation from core%                               gabor orientation (deg)%    gabor.unique_im_nrs_core    : (int) number for each unique core gabor%    gabor.unique_im_nrs_wm_test : (int) number for each unique WM test gabor%% OUTPUTS:%   gabors      : (uint8) Gabor images used for VCD experiment, 5-dim array:%                   height (pixels) x width (pixels) x 3 (rgb) x 8 orientations x 3 contrasts x 5 deltas (1 og + 4 deltas)%   masks       : (uint8) alpha mask images used for VCD experiment, 4-dim array:%                   height (pixels) x width x 8 orientations x 3 contrasts x 5 deltas (1 og + 4 deltas)%   info        : table with gabor stimulus information matching the gabor array%      unique_im     : (double) unique image nr for each Gabor: range 1-24,%                       111-206 for wm test images.%      stim_pos_i    : (double) stimulus position index. 1=left, 2=right%      stim_pos      : (cell) stimulus position, same as stim_pos_i but%                       human readable ({'left'} or {'right'})%      orient_deg    : (double) tilt in degrees (0 = 12 o'clock).%      orient_i      : (double) same as orient_deg but indexed 1%                       (smallest: 11.25 deg) to 8 (largest: 168.75 deg)%      contrast      : (double) coherence level (fraction of 1),%      contrast_i    : (double) same as dot_coh but indexed 1 (lowest: 0.05)%                       2 (medium: 0.1) or 3 (highest: 1).%      phase_deg     : (double) gabor phase (deg), one of four quadrature%                       phases (0, 90, 180, 270).%      phase_i       : (double) same as phase_deg but indexed 1 (lowest: 0%                       deg) to 4 (highest: 270).%      delta_deg     : (double) Gabor orientation relative from%                       corresponding core Gabor -15, -5, +5, +15 (deg)%      delta_i       : (double) same as delta_deg but indexed 1%                       (-15 deg), 2 (-5 deg), 3 (+5 deg), or 4 (+15 deg).%      is_in_img_ltm : (logical) whether the Gabor stimulus is part of the%                       subselected stimuli used in imagery and long-term%                       memory task.%% Written by Eline Kupers 2024/12, updated 2025/4%% Check inputs% Make sure the image has an even number of pixels, so we have center pixif mod(params.stim.gabor.img_sz_pix,2)~=0    error('[%s]: image support size does not have an even nr of pixels!', mfilename)end% If we have delta refs, add a "zeroth" orientation for the baseline (no delta change)if ~isempty(params.stim.gabor.delta_from_ref)    gbr_deltas = [0, params.stim.gabor.delta_from_ref];else    gbr_deltas = 0;end% Define all phases:all_phases_deg = repelem(params.stim.gabor.ph_deg, length(gbr_deltas)*length(params.stim.gabor.contrast))';all_phases_deg = repmat(all_phases_deg,length(params.stim.gabor.ori_deg)/length(params.stim.gabor.ph_deg),1);[~,phase_idx]  = ismember(all_phases_deg,params.stim.gabor.ph_deg);% Define all orientations:all_orient_deg = repelem(params.stim.gabor.ori_deg, length(gbr_deltas)*length(params.stim.gabor.contrast))';orient_idx     = repelem(1:length(params.stim.gabor.ori_deg),length(gbr_deltas)*length(params.stim.gabor.contrast))';% Define all contrasts:all_contrasts = repmat(params.stim.gabor.contrast, 1, length(gbr_deltas)*length(params.stim.gabor.ori_deg))';contrast_idx  = repmat([1:length(params.stim.gabor.contrast)], 1, length(gbr_deltas)*length(params.stim.gabor.ori_deg))';% Define all stim locations:all_stim_loc = repmat({'left','right'},1,length(gbr_deltas)*(length(params.stim.gabor.ori_deg)/2)*length(params.stim.gabor.contrast))';stimloc_idx  = repmat([1,2],1,length(gbr_deltas)*(length(params.stim.gabor.ori_deg)/2)*length(params.stim.gabor.contrast))';% Define all deltas:all_deltas = repmat(repelem([0, params.stim.gabor.delta_from_ref],length(params.stim.gabor.contrast)),1,length(params.stim.gabor.ori_deg));all_deltas = all_deltas';delta_idx  = repmat(repelem([0:length(params.stim.gabor.delta_from_ref)],length(params.stim.gabor.contrast)),1,length(params.stim.gabor.ori_deg));delta_idx  = delta_idx';% get unique image nrsimg_im_nrs1  = reshape(params.stim.gabor.unique_im_nrs_core,8,[])';img_im_nrs2  = reshape(params.stim.gabor.unique_im_nrs_wm_test,length(params.stim.gabor.unique_im_nrs_wm_test)/length(params.stim.gabor.contrast),[])';img_im_nrs2  = reshape(img_im_nrs2,length(params.stim.gabor.contrast)*length(params.stim.gabor.delta_from_ref),[]);img_im_nrs   = cat(1,img_im_nrs1,img_im_nrs2); % ori 1, contrast 1:3, delta = nr+dd, ori 2 ... etcimg_im_nrs   = img_im_nrs(:);ltm_img_bool = ismember(img_im_nrs,params.stim.gabor.unique_im_nrs_specialcore);assert(sum(ltm_img_bool)==8);% Create info tableinfo = table(img_im_nrs(:), ...    all_stim_loc(:), ...    stimloc_idx(:),...    all_orient_deg(:), ...    orient_idx(:), ...    all_contrasts(:),...    contrast_idx(:), ...    all_phases_deg(:), ...    phase_idx, ...    all_deltas(:), ...    delta_idx, ...    ltm_img_bool);% add column namesinfo.Properties.VariableNames = {'unique_im','stim_pos','stim_pos_i','orient_deg',...    'orient_i', 'contrast','contrast_i','phase_deg','phase_i','delta_deg','delta_i', 'is_in_ltm_img'};% Preallocate spacegabors = uint8(zeros(params.stim.gabor.img_sz_pix,params.stim.gabor.img_sz_pix,3, ...    length(params.stim.gabor.ori_deg), ...    length(params.stim.gabor.contrast), ...    length(gbr_deltas)));masks = uint8(zeros(params.stim.gabor.img_sz_pix,params.stim.gabor.img_sz_pix, ...    length(params.stim.gabor.ori_deg), ...    length(params.stim.gabor.contrast), ...    length(gbr_deltas)));% Loop over orientationfor bb = 1:length(orient_idx)        curr_angle_deg = all_orient_deg(bb);    curr_delta = all_deltas(bb);    curr_phase = all_phases_deg(bb);    curr_contrast = all_contrasts(bb);        final_angle_deg = curr_angle_deg+curr_delta;        % Print corresponding gabor params    fprintf('\nImage idx',bb)    if curr_delta == 0        fprintf('\nAngle: %2.2f deg', curr_angle_deg)    else        fprintf('\nAngle: %2.2f + %2.2f delta deg', ...            curr_angle_deg, all_deltas(bb))    end    fprintf('\nPhase %d deg', curr_phase)    fprintf('\nContrast %1.2f', curr_contrast)        % TRICKY STUFF: DO we subtract 90 deg to ensure 0 deg desired    % orientation is 12 o'clock in x,y-pixel space? NO?    %     curr_angle_deg = curr_angle_deg-90;        % Wrap around 360    if final_angle_deg < 0        final_angle_deg = 360+final_angle_deg;    end        % Create gabor!    [img_c, alpha_mask] = vcd_create_gabor(...        params.stim.gabor.img_sz_pix, ...        params.stim.gabor.gauss_std_pix, ...        params.stim.gabor.cycles_per_pix,...        final_angle_deg,...        curr_phase,...        curr_contrast,...        params.stim.bckgrnd_grayval);        % Store image    gabors(:,:,:,orient_idx(bb),contrast_idx(bb),delta_idx(bb)+1) = uint8(repmat(img_c,[1 1 3]));    masks(:,:,orient_idx(bb),contrast_idx(bb),delta_idx(bb)+1)    = uint8(alpha_mask);            filename = sprintf('%02d_vcd_gabor_ori%02d_c%02d_delta%02d.png',img_im_nrs(bb),orient_idx(bb),contrast_idx(bb),delta_idx(bb));    imwrite(gabors(:,:,:,orient_idx(bb),contrast_idx(bb),delta_idx(bb)+1), fullfile(vcd_rootPath,'figs',params.disp.name,'gabor',filename));            % Clean up    clear img_c    end % num orientationsfprintf('Done!\n')%% Store images and info tableif params.stim.store_imgs    fprintf('[%s]:Storing images and info..\n',mfilename)    saveDir = fileparts(fullfile(params.stim.gabor.stimfile));    if ~exist(saveDir,'dir'), mkdir(saveDir); end    save(fullfile(sprintf('%s_%s.mat',params.stim.gabor.stimfile,datestr(now,30))),'gabors','masks','info','-v7.3');        saveDir = fileparts(fullfile(params.stim.gabor.infofile));    if ~exist(saveDir,'dir'), mkdir(saveDir); end    writetable(info, fullfile(sprintf('%s_%s.csv',params.stim.gabor.infofile,datestr(now,30))))end%% Visualize Gabors if requestedif params.verbose    makeprettyfigures;        % create folders for visual checks    if params.store_imgs        saveFigDir1 = fullfile(vcd_rootPath,'figs',params.disp.name,'gabor','visual_checks','gabor_im');        saveFigDir2 = fullfile(vcd_rootPath,'figs',params.disp.name,'gabor','visual_checks','gabor_hist');        if ~exist(saveFigDir1,'dir'); mkdir(saveFigDir1); end        if ~exist(saveFigDir2,'dir'); mkdir(saveFigDir2); end    end        fH1 = figure(1); fH2 = figure(2);    set(fH1, 'Position', [0 0 1024 1080], 'color','w'); % gabor im itself    set(fH2, 'Position', [1 400 750 578], 'color','w'); % histogram        counter = 1;        % loop over deltas    for dd = 1:size(gabors,6)        if dd==1, dlta = 0;  else, dlta = params.stim.gabor.delta_from_ref(dd-1); end                % loop over contrasts        for ii = 1:size(gabors,5)                        % loop over orientations            for jj=1:size(gabors,4)                                % check image nr                im_idx = (info.orient_deg==params.stim.gabor.ori_deg(jj) & ...                          info.contrast==params.stim.gabor.contrast(ii) & ...                          info.delta_deg==dlta);                                im_nr = info.unique_im(im_idx);                                % Start plotting!                % Plot gabor figure (with title and axes), and store                % separate png (no axes/title)                figure(fH1); clf;                imagesc(gabors(:,:,:,jj,ii,dd));                colormap gray; set(gca, 'CLim',[1 255])                title(sprintf('ori:%3.2f deg c:%1.2f ph:%3.0f delta:%02d', ...                    params.stim.gabor.ori_deg(jj),...                    params.stim.gabor.contrast(ii),...                    params.stim.gabor.ph_deg(mod(ii-1,4)+1),...                    dlta));                cb = colorbar; cb.Ticks = [1, 50, 100, 150, 200, 250];                set(gca, 'FontSize',20, 'TickDir','out', 'LineWidth', 2); axis image;                drawnow;                axis image                                if params.store_imgs                    filename = sprintf('%02d_vcd_gabor_ori%02d_c%02d_delta%02d.png',im_nr,jj,ii,dd-1);                    print(fH1,'-dpng','-r300',fullfile(saveFigDir1,filename));                    imwrite(gabors(:,:,:,jj,ii,dd), fullfile(vcd_rootPath,'figs',params.disp.name,'gabor',filename));                end                                % Plot pix histogram                figure(fH2); clf                histogram(gabors(:,:,:,jj,ii,dd), 'NumBins', 30);                title(sprintf('ori:%3.2f deg c:%1.2f ph:%3.0f delta:%02d', ...                    params.stim.gabor.ori_deg(jj),...                    params.stim.gabor.contrast(ii),...                    params.stim.gabor.ph_deg(mod(ii-1,4)+1),...                    dlta));                box off; axis square; xlim([-10 260]); ylim([0,3.5].*10^5)                drawnow;                axis square                set(gca,'XTick',[0 64 128 190 255])                set(gca,'YTick',[1:3].*10^5)                if params.store_imgs                    filename = sprintf('%02d_vcd_gabor_ori%02d_c%02d_delta%02d_hist.png',im_nr,jj,ii,dd-1);                    print(fH2,'-dpng','-r300',fullfile(saveFigDir2,filename));                end                counter = counter+1;            end        end    endendreturn