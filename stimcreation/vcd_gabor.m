function [gabors, masks, info] = vcd_gabor(params)% VCD function to create gabor images for experimental display.%  [gabors, masks, info] = vcd_gabor(p)%% Purpose:%   Make gabors images and corresponding alpha transparency masks that crop %   the top and bottom corners when presenting images.%%   We have 24 core gabor images sorted as follows:%   * im 1:8   8 orientations for contrast level 1%   * im 9:16  8 orientations for contrast level 2%   * im 17:24 8 orientations for contrast level 3% %   4 quadrature phases will be evenly distributed across these 24 core images.%   2 spatial locations (left/right) will be evenly distributed across 24%   core images: uneven image nrs are left, even image nrs are right.% %   We also create 4 test images for WM task: -15, -5 +5 +15 deg%   orientation tilt offsets from core image orientation, with unique image%   nrs 111-206. These WM test images inherit the spatial location,%   contrast level and phase from their reference gabor.% %   When params.stim.store_imgs = true, this function will store generated%   object images as a single mat file in params.stim.obj.stimfile (e.g.:%   fullfile(vcd_rootPath,'workspaces','stimuli',<disp_name>, ...%   'gabor_<disp_name>_<date>.mat'). % % INPUTS:%   params                  : stim params struct (see vcd_setStimParams.m)%    *** this function requires the following struct fields ***%    bckgrnd_grayval        : (int) background gray value (128)%    gabor.img_sz_pix       : (int) size of image support in pixels, needs%                               to be even integer number!%    gabor.gauss_std_pix    : (double) std of gaussian window%    gabor.cycles_per_pix   : (double) spatial frequency (cycles per pixel)%    gabor.contrast         : (double) gabor contrasts (fraction) (Michelson) %    gabor.ori_deg          : (double) gabor orientation (deg), 0 deg = 12 o'clock%    gabor.ph_deg           : (double) gabor phase (deg)%    gabor.delta_from_ref   : (double) offset gabor orientation from core %                               gabor orientation (deg)%    gabor.unique_im_nrs    : (int) number for each unique core gabor%    gabor.unique_im_nrs_WM : (int) number for each unique WM test gabor%% OUTPUTS:%   gabors      : (uint8) Gabor images used for VCD experiment, 5-dim array:%                   w (pixels) x h (pixels) x 3 (rgb) x 8 orientations x 3 contrasts x 5 deltas (1 og + 4 deltas)%   masks       : (uint8) alpha mask images used for VCD experiment, 4-dim array:%                   w (pixels) x h (pixels) x 8 orientations x 3 contrasts x 5 deltas (1 og + 4 deltas)%   info        : table with gabor stimulus information matching the gabor array%       unique_im    stim_pos_i    stim_pos     orient_deg    orient_i  contrast    contrast_i    phase_deg    phase_i    delta_deg    delta_i%         1           1         {'left' }       11.25         1          0.05          1              0          1            0          0   %           ...%        206          2         {'right'}      168.75         8          1             3             135         4            15         4   %% Written by Eline Kupers 2024/12, updated 2025/4%% Check inputs% Make sure the image has an even number of pixels, so we have center pixif mod(params.stim.gabor.img_sz_pix,2)~=0    error('[%s]: image support size does not have an even nr of pixels!', mfilename)end% If we have delta refs, add a "zeroth" orientation for the baseline (no delta change)if ~isempty(params.stim.gabor.delta_from_ref)    gbr_deltas = [0, params.stim.gabor.delta_from_ref];else    gbr_deltas = 0;end% All phases:all_phases_deg = repelem(params.stim.gabor.ph_deg, length(gbr_deltas)*length(params.stim.gabor.contrast))';all_phases_deg = repmat(all_phases_deg,length(params.stim.gabor.ori_deg)/length(params.stim.gabor.ph_deg),1);[~,phase_idx]  = ismember(all_phases_deg,params.stim.gabor.ph_deg);% All orientations:all_orient_deg = repelem(params.stim.gabor.ori_deg, length(gbr_deltas)*length(params.stim.gabor.contrast))';orient_idx = repelem(1:length(params.stim.gabor.ori_deg),length(gbr_deltas)*length(params.stim.gabor.contrast))';% All contrasts:all_contrasts = repmat(params.stim.gabor.contrast, 1, length(gbr_deltas)*length(params.stim.gabor.ori_deg))';contrast_idx = repmat([1:length(params.stim.gabor.contrast)], 1, length(gbr_deltas)*length(params.stim.gabor.ori_deg))';% All stim locations:all_stim_loc = repmat({'left','right'},1,length(gbr_deltas)*(length(params.stim.gabor.ori_deg)/2)*length(params.stim.gabor.contrast))';stimloc_idx = repmat([1,2],1,length(gbr_deltas)*(length(params.stim.gabor.ori_deg)/2)*length(params.stim.gabor.contrast))';% All deltas:all_deltas = repmat(repelem([0, params.stim.gabor.delta_from_ref],length(params.stim.gabor.contrast)),1,length(params.stim.gabor.ori_deg));all_deltas = all_deltas';delta_idx  = repmat(repelem([0:length(params.stim.gabor.delta_from_ref)],length(params.stim.gabor.contrast)),1,length(params.stim.gabor.ori_deg));delta_idx = delta_idx';% get unique image nrsimg_im_nrs1 = reshape(params.stim.gabor.unique_im_nrs,8,[])';img_im_nrs2 = reshape(params.stim.gabor.unique_im_nrs_WM,length(params.stim.gabor.unique_im_nrs_WM)/length(params.stim.gabor.contrast),[])';img_im_nrs2 = reshape(img_im_nrs2,length(params.stim.gabor.contrast)*length(params.stim.gabor.delta_from_ref),[]);img_im_nrs = cat(1,img_im_nrs1,img_im_nrs2); % ori 1, contrast 1:3, delta = nr+dd, ori 2 ... etcimg_im_nrs = img_im_nrs(:);% Create info tableinfo = table(img_im_nrs(:), ...     stimloc_idx(:),...    all_stim_loc(:), ...    all_orient_deg(:), ...    orient_idx(:), ...    all_contrasts(:),...    contrast_idx(:), ...    all_phases_deg(:), ...    phase_idx, ...    all_deltas(:), ...    delta_idx);         % add column namesinfo.Properties.VariableNames = {'unique_im','stim_pos_i','stim_pos','orient_deg','orient_i', 'contrast','contrast_i','phase_deg','phase_i','delta_deg','delta_i'};% Preallocate spacegabors = uint8(zeros(params.stim.gabor.img_sz_pix,params.stim.gabor.img_sz_pix,3, ...    length(params.stim.gabor.ori_deg), ...    length(params.stim.gabor.contrast), ...    length(gbr_deltas)));masks = uint8(zeros(params.stim.gabor.img_sz_pix,params.stim.gabor.img_sz_pix, ...    length(params.stim.gabor.ori_deg), ...    length(params.stim.gabor.contrast), ...    length(gbr_deltas)));% Loop over orientationfor bb = 1:length(orient_idx)    curr_angle_deg = all_orient_deg(bb);    curr_delta = delta_idx(bb);    curr_phase = all_phases_deg(bb);    curr_contrast = all_contrasts(bb);        % Print corresponding gabor params    fprintf('\nImage idx',bb)    if curr_delta == 0        fprintf('\nAngle: %d deg', curr_angle_deg)    else        fprintf('\nAngle: %d + %d delta deg', ...            curr_angle_deg, all_deltas(bb))    end    fprintf('\nPhase %d deg', curr_phase)    fprintf('\nContrast %1.2f', curr_contrast)        % TRICKY STUFF: DO we subtract 90 deg to ensure 0 deg desired    % orientation is 12 o'clock in x,y-pixel space? NO?%     curr_angle_deg = curr_angle_deg-90;        % Wrap around 360    if curr_angle_deg < 0        curr_angle_deg = 360+curr_angle_deg;    end        % Create gabor!    [img_c, alpha_mask] = vcd_create_gabor(...        params.stim.gabor.img_sz_pix, ...        params.stim.gabor.gauss_std_pix, ...        params.stim.gabor.cycles_per_pix,...        curr_angle_deg,...        curr_phase,...        curr_contrast,...        params.stim.bckgrnd_grayval);        % Store image    gabors(:,:,:,orient_idx(bb),contrast_idx(bb),delta_idx(bb)+1) = uint8(repmat(img_c,[1 1 3]));    masks(:,:,orient_idx(bb),contrast_idx(bb),delta_idx(bb)+1)    = uint8(alpha_mask);        % Clean up    clear img_c    end % num orientationsfprintf('Done!\n')%% Store images and info tableif params.stim.store_imgs    fprintf('[%s]:Storing images and info..\n',mfilename)    saveDir = fileparts(fullfile(params.stim.gabor.stimfile));    if ~exist(saveDir,'dir'), mkdir(saveDir); end    save(fullfile(sprintf('%s_%s.mat',params.stim.gabor.stimfile,datestr(now,30))),'gabors','masks','info','-v7.3');        saveDir = fileparts(fullfile(params.stim.gabor.infofile));    if ~exist(saveDir,'dir'), mkdir(saveDir); end    writetable(info, fullfile(sprintf('%s_%s.csv',params.stim.gabor.infofile,datestr(now,30))))endreturn