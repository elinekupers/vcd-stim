function [gabors, masks, info, p, all_gabors, all_masks] = vcd_gabor(p)% VCD function:%  [gabors, masks, info, p, all_gabors, all_masks] = vcd_gabor(p)%% Purpose:%   Create a gabor image for experimental display.%   See vcd_setStimParams.m for gabor parameters.%%   gabors(:,:,:,1) will have 24 gabor images sorted as follows:%   *im 1:8   unique orientations for contrast level 1%   *im 9:16  unique orientations for contrast level 2%   *im 17:24 unique orientations for contrast level 3% %   4 phases will be evenly distributed across 24 images:%   Unique im  stim loc  orient   contrast    phase (deg)%   1.0000     1.0000   12.0000    0.0500         0%   2.0000     2.0000   37.0000    0.0500   45.0000%   3.0000     1.0000   51.0000    0.0500   90.0000%   4.0000     2.0000   80.0000    0.0500  135.0000%   5.0000     1.0000  102.0000    0.0500         0%   6.0000     2.0000  121.0000    0.0500   45.0000%   7.0000     1.0000  145.0000    0.0500   90.0000%   8.0000     2.0000  169.0000    0.0500  135.0000%   9.0000     1.0000   12.0000    0.1000         0%   10.0000    2.0000   37.0000    0.1000   45.0000%   11.0000    1.0000   51.0000    0.1000   90.0000%   12.0000    2.0000   80.0000    0.1000  135.0000%   13.0000    1.0000  102.0000    0.1000         0%   14.0000    2.0000  121.0000    0.1000   45.0000%   15.0000    1.0000  145.0000    0.1000   90.0000%   16.0000    2.0000  169.0000    0.1000  135.0000%   17.0000    1.0000   12.0000    1.0000         0%   18.0000    2.0000   37.0000    1.0000   45.0000%   19.0000    1.0000   51.0000    1.0000   90.0000%   20.0000    2.0000   80.0000    1.0000  135.0000%   21.0000    1.0000  102.0000    1.0000         0%   22.0000    2.0000  121.0000    1.0000   45.0000%   23.0000    1.0000  145.0000    1.0000   90.0000%   24.0000    2.0000  169.0000    1.0000  135.0000%% INPUTS:%   p       : gabor params   (see vcd_setStimParams.m)%               img_sz,window_std,sf,ang,ph%% OUTPUTS:%   gabors      : unique Gabor images used for VCD experiment, 5-dim array:%                   w (pixels) x h (pixels) x 3 (rgb) x 3 contrasts x 40 images (8 orientations x (1 og + 4 deltas))%   masks       : unique alpha mask images used for VCD experiment, 4-dim array:%                   w (pixels) x h (pixels) x 3 contrasts x 40 images (8 orientations x (1 og + 4 deltas))%   info        : table with gabor stimulus information (angle, contrast, phases), matching the gabors array%   p           : updated params struct%   all_gabors  : All generated Gabor images, 6-dim array:%                   w (pixels) x h (pixels) x 3 x 8 orientations x 4 phases x 3 contrasts x 4 deltas%   all_masks   : All generated Gabor masks, 5-dim array:%                   w (pixels) x h (pixels) x 8 orientations x 4 phases x 3 contrasts x 4 deltas%% Written by Eline Kupers 2024/12%% Check inputs% Make sure the image has an even number of pixels, so we have center pixif mod(p.stim.gabor.img_sz_pix,2)~=0    error('[%s]: image support size does not have an even nr of pixels!', mfilename)end% If we have delta refs, add a "zeroth" orientation for the baseline (no delta change)if ~isempty(p.stim.gabor.delta_from_ref)    gbr_oris = [0:length(p.stim.gabor.delta_from_ref)];else    gbr_oris = 0;end% Preallocate spacenum_bins = length(p.stim.gabor.ori_deg);all_gabors = uint8(zeros(p.stim.gabor.img_sz_pix,p.stim.gabor.img_sz_pix,3, ...    length(p.stim.gabor.ori_deg), ...    length(p.stim.gabor.ph_deg), ...    length(p.stim.gabor.contrast), ...    length(p.stim.gabor.delta_from_ref)));all_masks = uint8(zeros(p.stim.gabor.img_sz_pix,p.stim.gabor.img_sz_pix, ...    length(p.stim.gabor.ori_deg), ...    length(p.stim.gabor.ph_deg), ...    length(p.stim.gabor.contrast), ...    length(p.stim.gabor.delta_from_ref)));info = [];% Loop over orientation "bins"for bb = 1:num_bins    fprintf('\nOrientation Bin%d.',bb)        % Loop over deltas    for dd = gbr_oris                if dd == 0            curr_angle_deg = p.stim.gabor.ori_deg(bb);            fprintf('\nAngle: %d deg', curr_angle_deg)        else            curr_angle_deg = p.stim.gabor.ori_deg(bb)+p.stim.gabor.delta_from_ref(dd);            fprintf('\nAngle: %d + %d delta deg', ...                curr_angle_deg, p.stim.gabor.delta_from_ref(dd))        end                if curr_angle_deg < 0            curr_angle_deg = 360+curr_angle_deg;        end                % Loop over phase values        for pr = 1:length(p.stim.gabor.ph_deg)            fprintf('\nPhase %d (deg)', p.stim.gabor.ph_deg(pr))                        % Loop over contrast values            fprintf('\nContrast')            for cc = 1:length(p.stim.gabor.contrast)                                % Create gabor!                [img_c, alpha_mask] = vcd_create_gabor(...                    p.stim.gabor.img_sz_pix, ...                    p.stim.gabor.gauss_std_pix, ...                    p.stim.gabor.cycles_per_pix,...                    curr_angle_deg,...                    p.stim.gabor.ph_deg(pr),...                    p.stim.gabor.contrast(cc),...                    p.stim.bckgrnd_grayval); % 128                                % Get unique image nr for bookkeeping                if dd==0                    if pr == mod(bb-1,length(p.stim.gabor.ph_deg))+1                        unique_im_nr = bb + length(p.stim.gabor.ori_deg)*(cc-1);                    else                        unique_im_nr = NaN;                    end                    all_gabors(:,:,:,bb,pr,cc,1) = uint8(repmat(img_c,[1 1 3]));                    all_masks(:,:,bb,pr,cc,1)    = uint8(alpha_mask);                    info = cat(1, info, [bb, p.stim.gabor.ori_deg(bb), ...                        p.stim.gabor.ph_deg(pr), p.stim.gabor.contrast(cc), 0, unique_im_nr]);                                    else                    all_gabors(:,:,:,bb,pr,cc,dd+1) = uint8(repmat(img_c,[1 1 3]));                    all_masks(:,:,bb,pr,cc,dd+1)    = uint8(alpha_mask);                    info = cat(1, info, [bb, p.stim.gabor.ori_deg(bb), ...                        p.stim.gabor.ph_deg(pr), p.stim.gabor.contrast(cc), p.stim.gabor.delta_from_ref(dd), NaN]);                end                                fprintf('.')            end                        % Clean up            clear img_c                    end % nr of phases        fprintf('.')            end % nr delta for main orientation        fprintf('.')end % num binsfprintf('Done!\n')%% Reshape gabor image arrayG = cast([],'uint8'); M = cast([],'uint8');for cc = 1:length(p.stim.gabor.contrast)    for gg = 1:length(p.stim.gabor.ori_deg)        G(:,:,:,1,gg+((cc-1)*length(p.stim.gabor.ori_deg))) = all_gabors(:,:,:, gg, mod(gg-1,length(p.stim.gabor.ph_deg))+1, cc, 1);        M(:,:,1,gg+((cc-1)*length(p.stim.gabor.ori_deg)))   = all_masks(:,:,gg, mod(gg-1,length(p.stim.gabor.ph_deg))+1, cc, 1);    endendG_delta = cast([],'uint8'); M_delta = cast([],'uint8');for dd = 1:length(p.stim.gabor.delta_from_ref)    for cc = 1:length(p.stim.gabor.contrast)        for gg = 1:length(p.stim.gabor.ori_deg)            G_delta(:,:,:, dd,gg+((cc-1)*length(p.stim.gabor.ori_deg))) = all_gabors(:,:,:, gg, mod(gg-1,length(p.stim.gabor.ph_deg))+1, cc, dd+1);            M_delta(:,:,dd,gg+((cc-1)*length(p.stim.gabor.ori_deg))) = all_masks(:,:, gg, mod(gg-1,length(p.stim.gabor.ph_deg))+1, cc, dd+1);        end    endend% Organize dimensions as w (pix) x h (pix) x 3 x 24 unique images (8 ori x 3 contrasts) x 5 delta levels (0 + 4 deltas)gabors = cat(4,G,G_delta);gabors = permute(gabors, [1,2,3,5,4]);% Organize dimensions as w (pix) x h (pix) x 24 unique images (8 ori x 3 contrasts) x 5 delta levels (0 + 4 deltas)masks = cat(3,M,M_delta);masks = permute(masks, [1,2,4,3]);% Create data tableinfo = table(info(:,1),info(:,2),info(:,3),info(:,4),info(:,5),info(:,6));info.Properties.VariableNames = {'bin','ori_deg','phase_deg','contrast','delta_deg','unique_im'};% Store images and info tableif p.stim.store_imgs    fprintf('[%s]:Storing images and info..\n',mfilename)    saveDir = fileparts(fullfile(p.stim.gabor.stimfile));    if ~exist(saveDir,'dir'), mkdir(saveDir); end    save(fullfile(sprintf('%s_%s.mat',p.stim.gabor.stimfile,datestr(now,30))),'all_gabors','gabors','all_masks','masks','info','-v7.3');        saveDir = fileparts(fullfile(p.stim.gabor.infofile));    if ~exist(saveDir,'dir'), mkdir(saveDir); end    writetable(info, fullfile(sprintf('%s_%s.csv',p.stim.gabor.infofile,datestr(now,30))))endend