function [gabors, info, p] = vcd_gabor(p)% VCD function:%  [gabors, info, p] = vcd_gabor(p)%% Purpose:%   Create a gabor image for experimental display.%   See vcd_setStimParams.m for gabor parameters.%% INPUTS:%   p       : gabor params   (see vcd_setStimParams.m)%               img_sz,window_std,sf,ang,ph%% OUTPUTS:%   gabors  : Gabor images, 6-dim array:%               w (pixels) x h (pixels) x 8 orientations x 4 phases x 3 contrasts x 4 deltas%   info    : table with gabor stimulus information (angle, contrast,%               phases), matching the gabors array%   p       : updated params struct%% Written by Eline Kupers 2024/12%% Check inputs% Make sure the image has an uneven number of pixels, so we have center pixif mod(p.stim.gabor.img_sz_pix,2)==0    p.stim.gabor.img_sz_pix = p.stim.gabor.img_sz_pix +1;endif ~isempty(p.stim.gabor.delta_from_ref)    gbr_oris = [0:length(p.stim.gabor.delta_from_ref)];else    gbr_oris = 0;end% Preallocate spacenum_bins = length(p.stim.gabor.ori_deg);gabors = uint8(zeros(p.stim.gabor.img_sz_pix,p.stim.gabor.img_sz_pix, ...    length(p.stim.gabor.ori_deg), ...    length(p.stim.gabor.ph_deg), ...    length(p.stim.gabor.contrast), ...    length(p.stim.gabor.delta_from_ref)));info = [];for bb = 1:num_bins    fprintf('\nOrientation Bin%d.',bb)        for dd = gbr_oris                        if dd == 0                curr_angle_deg = p.stim.gabor.ori_deg(bb);                fprintf('\nAngle: %d deg', curr_angle_deg)            else                curr_angle_deg = p.stim.gabor.ori_deg(bb)+p.stim.gabor.delta_from_ref(dd);                fprintf('\nAngle: %d + %d delta deg', ...                    curr_angle_deg, p.stim.gabor.delta_from_ref(dd))            end                        if curr_angle_deg < 0                curr_angle_deg = 360+curr_angle_deg;            end                               for pr = 1:length(p.stim.gabor.ph_deg)                fprintf('\nPhase %d (deg)', p.stim.gabor.ph_deg(pr))                                fprintf('\nContrast')                for cc = 1:length(p.stim.gabor.contrast)                                        img_c = vcd_create_gabor(...                        p.stim.gabor.img_sz_pix, ...                        p.stim.gabor.gauss_std_pix, ...                        p.stim.gabor.cycles_per_pix,...                        curr_angle_deg,...                        p.stim.gabor.ph_deg(pr),...                        p.stim.gabor.contrast(cc));                                        if dd==0                        gabors(:,:,bb,pr,cc,1) = uint8(img_c);                        info = cat(1, info, [bb, p.stim.gabor.ori_deg(bb), ...                            p.stim.gabor.ph_deg(pr), p.stim.gabor.contrast(cc), 0]);                    else                        gabors(:,:,bb,pr,cc,dd+1) = uint8(img_c);                        info = cat(1, info, [bb, p.stim.gabor.ori_deg(bb), ...                            p.stim.gabor.ph_deg(pr), p.stim.gabor.contrast(cc), p.stim.gabor.delta_from_ref(dd)]);                    end                                        fprintf('.')                end                                clear img_c                            end % nr of phases                    end % nr delta for main orientation        fprintf('.')end % num bins fprintf('\nDone!')info = table(info(:,1),info(:,2),info(:,3),info(:,4),info(:,5));info.Properties.VariableNames = {'bin','ori_deg','phase_deg','contrast','delta_deg'};if p.stim.store_imgs    fprintf('\nStoring images..')    save(fullfile(p.stim.gabor.stimfile), 'gabors','-v7.3');    writetable(info, fullfile(p.stim.gabor.infofile))endreturn